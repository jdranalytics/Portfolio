---------------------------------------------------------------------------------------------
-- DDL PARA CREACIÓN DE VISTAS Y MODELOS DE FORECAST DE VENTAS POR M3 DE PRODUCTO
-- Este script crea vistas y modelos necesarios para el análisis de ventas de Bebidas por M3
-- en Snowflake, incluyendo la preparación de datos históricos y la generación de predicciones.
---------------------------------------------------------------------------------------------


-- HISTÓRICO PARA FORECAST DE VENTAS POR M3 DE PRODUCTO

CREATE OR REPLACE VIEW BEBIDAS_PROJECT.BEBIDAS_ANALYTICS.VW_VENTAS_HISTORICO_M3 AS
SELECT 
    MES, 
    REGION_CATEGORIA_PRODUCTO,
    M3_VENDIDOS,                                                -- LABEL
    PRECIO_PROMEDIO AS AVG_PRECIO_LISTA,                        -- FEATURE A
    DESC_PORCENTAJE AS AVG_DESC_PORCENTAJE,                     -- FEATURE B
    'Histórico' AS ORIGEN
FROM VW_VENTAS_ML
WHERE MES <= '2025-05-01';


-- FEATURES PARA ESCENARIO 1 M3 A VENDER CON PRECIO PROMEDIO Y DESCUENTO PROMEDIO

CREATE OR REPLACE VIEW BEBIDAS_PROJECT.BEBIDAS_ANALYTICS.VW_VENTAS_FCST_FEATURES_1 AS
   
WITH date_series AS (
    SELECT TO_DATE(DATEADD(MONTH, seq, '2025-06-01')) AS MES
    FROM (
        SELECT SEQ4() AS seq
        FROM TABLE(GENERATOR(ROWCOUNT => 12))
    )
)
SELECT 
    rcp.REGION_CATEGORIA_PRODUCTO,
    date_series.MES AS MES,
    CEIL(AVG(rcp.AVG_PRECIO_LISTA)/100)*100 AS AVG_PRECIO_LISTA,
    ROUND(AVG(rcp.AVG_DESC_PORCENTAJE), 0) AS AVG_DESC_PORCENTAJE,
    'Forecast 1' AS ORIGEN
FROM BEBIDAS_PROJECT.BEBIDAS_ANALYTICS.VW_VENTAS_HISTORICO_M3 rcp
CROSS JOIN date_series
GROUP BY rcp.REGION_CATEGORIA_PRODUCTO, date_series.MES
ORDER BY rcp.REGION_CATEGORIA_PRODUCTO, date_series.MES;

-- FEATURES PARA ESCENARIO 2 M3 A VENDER CON ULTIMO PRECIO CON 20% DE INCREMENTO Y DESCUENTO PROMEDIO

CREATE OR REPLACE VIEW BEBIDAS_PROJECT.BEBIDAS_ANALYTICS.VW_VENTAS_FCST_FEATURES_2 AS
   
WITH date_series AS (
    SELECT TO_DATE(DATEADD(MONTH, seq, '2025-06-01')) AS MES
    FROM (
        SELECT SEQ4() AS seq
        FROM TABLE(GENERATOR(ROWCOUNT => 12))
    )
)
SELECT 
    rcp.REGION_CATEGORIA_PRODUCTO,
    date_series.MES AS MES,
    CEIL(MAX(rcp.AVG_PRECIO_LISTA)*1.2/100)*100 AS AVG_PRECIO_LISTA,
    ROUND(AVG(rcp.AVG_DESC_PORCENTAJE), 0) AS AVG_DESC_PORCENTAJE,
    'Forecast 2' AS ORIGEN
FROM BEBIDAS_PROJECT.BEBIDAS_ANALYTICS.VW_VENTAS_HISTORICO_M3 rcp
CROSS JOIN date_series
GROUP BY rcp.REGION_CATEGORIA_PRODUCTO, date_series.MES
ORDER BY rcp.REGION_CATEGORIA_PRODUCTO, date_series.MES;


---------------------------------------------------------------------------------------------
-- FORECAST DE VENTAS POR M3 DE PRODUCTO
---------------------------------------------------------------------------------------------

-----------------------------------------------------------
-- SETUP
-----------------------------------------------------------
use role ACCOUNTADMIN;
use warehouse COMPUTE_WH;
use database BEBIDAS_PROJECT;
use schema BEBIDAS_ANALYTICS;

-- VISUALIZACIÓN DE DATOS DE ENTRENAMIENTO

select * from VW_VENTAS_HISTORICO_M3 limit 10;

-- DATOS DE ENTRENAMIENTO (Histórico)

CREATE OR REPLACE VIEW VW_VENTAS_HISTORICO_M3_v1 AS SELECT
    * EXCLUDE(MES, ORIGEN),
    to_timestamp_ntz(MES) as MES_v1
FROM VW_VENTAS_HISTORICO_M3;

-- SON LAS MISMAS VISTAS QUE LAS FEATURES DE FORECAST PERO CON MES EN FORMATO TIMESTAMP
-- CONVERSIÓN DE MES A TIMESTAMP PARA USO EN EL MODELO

-- DATOS DE PREDICCIÓN (Escenario 1) 

CREATE OR REPLACE VIEW VW_VENTAS_FCST_FEATURES_1_v1 AS SELECT
    * EXCLUDE(MES, ORIGEN),
    to_timestamp_ntz(MES) as MES_v1
FROM VW_VENTAS_FCST_FEATURES_1;

-- DATOS DE PREDICCIÓN (Escenario 2)

CREATE OR REPLACE VIEW VW_VENTAS_FCST_FEATURES_2_v1 AS SELECT
    * EXCLUDE(MES, ORIGEN),
    to_timestamp_ntz(MES) as MES_v1
FROM VW_VENTAS_FCST_FEATURES_2;

-----------------------------------------------------------
-- CREAR PREDICCIONES
-----------------------------------------------------------
-- CREACIÓN DE MODELO XGBOOST PARA FORECAST.

CREATE OR REPLACE  SNOWFLAKE.ML.FORECAST FORECAST_M3_MULTIESCENARIOS(
    INPUT_DATA => SYSTEM$REFERENCE('VIEW', 'VW_VENTAS_HISTORICO_M3_v1'),
    SERIES_COLNAME => 'REGION_CATEGORIA_PRODUCTO',
    TIMESTAMP_COLNAME => 'MES_v1',
    TARGET_COLNAME => 'M3_VENDIDOS',
    CONFIG_OBJECT => { 'ON_ERROR': 'SKIP' }
);

-- GENERACIÓN DE PREDICCIONES POR ESCENARIOS

-- A) ESCENARIO 1: M3 A VENDER CON PRECIO PROMEDIO Y DESCUENTO PROMEDIO.

BEGIN
    -- This is the step that creates your predictions.
    CALL FORECAST_M3_MULTIESCENARIOS!FORECAST(
        INPUT_DATA => SYSTEM$REFERENCE('VIEW', 'VW_VENTAS_FCST_FEATURES_1_v1'),
        SERIES_COLNAME => 'REGION_CATEGORIA_PRODUCTO',
        TIMESTAMP_COLNAME => 'MES_v1',
        CONFIG_OBJECT => {'prediction_interval': 0.95} -- IC 95%
    );
    -- These steps store your predictions to a table.
    LET x := SQLID;
    CREATE OR REPLACE TABLE FORECAST_ESCENARIO_1 AS SELECT * FROM TABLE(RESULT_SCAN(:x));
END;


-- B) ESCENARIO 2: M3 A VENDER CON ULTIMO PRECIO CON 20% DE INCREMENTO Y DESCUENTO PROMEDIO.

BEGIN
    -- This is the step that creates your predictions.
    CALL FORECAST_M3_MULTIESCENARIOS!FORECAST(
        INPUT_DATA => SYSTEM$REFERENCE('VIEW', 'VW_VENTAS_FCST_FEATURES_2_v1'),
        SERIES_COLNAME => 'REGION_CATEGORIA_PRODUCTO',
        TIMESTAMP_COLNAME => 'MES_v1',
        -- Here we set your prediction interval.
        CONFIG_OBJECT => {'prediction_interval': 0.95}
    );
    -- These steps store your predictions to a table.
    LET x := SQLID;
    CREATE OR REPLACE TABLE FORECAST_ESCENARIO_2 AS SELECT * FROM TABLE(RESULT_SCAN(:x));
END;

-- CREACIÓN DE VISTA DE PREDICCIONES POR ESCENARIOS PARA VISUALIZACIÓN EN TABLEAU

CREATE OR REPLACE VIEW VW_FORECAST_M3_ESCENARIOS AS
WITH ESCENARIOS AS (
SELECT 
    REGION_CATEGORIA_PRODUCTO, 
    MES, 
    M3_VENDIDOS AS M3_PRODUCTO, 
    'ACTUAL' AS ORIGEN,
    NULL AS LOWER_BOUND,
    NULL AS UPPER_BOUND
FROM VW_VENTAS_HISTORICO_M3
UNION ALL
SELECT 
    REPLACE(series, '"', '') AS REGION_CATEGORIA_PRODUCTO, 
    ts AS MES, 
    forecast AS M3_PRODUCTO, 
    'FORECAST 1' AS ORIGEN,
    lower_bound AS LOWER_BOUND,
    upper_bound AS UPPER_BOUND,
FROM FORECAST_ESCENARIO_1
UNION ALL
SELECT 
    REPLACE(series, '"', '') AS REGION_CATEGORIA_PRODUCTO, 
    ts AS MES, 
    forecast AS M3_PRODUCTO, 
    'FORECAST 2' AS ORIGEN,
    lower_bound AS LOWER_BOUND,
    upper_bound AS UPPER_BOUND
FROM FORECAST_ESCENARIO_2)

SELECT *, 
    SPLIT_PART(REGION_CATEGORIA_PRODUCTO, '-',1) AS REGION,
    SPLIT_PART(REGION_CATEGORIA_PRODUCTO, '-',2) AS CATEGORIA,
    SPLIT_PART(REGION_CATEGORIA_PRODUCTO, '-',3) AS PRODUCTO
FROM ESCENARIOS;

SELECT * FROM VW_FORECAST_M3_ESCENARIOS ORDER BY  REGION_CATEGORIA_PRODUCTO, MES, ORIGEN;


----------------------------------------------------------------------------------------------
-- INSPECCIÓN DE RESULTADOS Y MÉTRICAS DE LOS MODELOS POR ITERACIÓN REGION_CATEGORIA_PRODUCTO
----------------------------------------------------------------------------------------------

-- PRECISIÓN DEL MODELO 
CALL FORECAST_M3_ESCENARIO_1!SHOW_EVALUATION_METRICS();

-- IMPORTANCIA DE LAS CARACTERÍSTICAS SELECCIONADAS (EN ESTE CASO SOLO HAY DOS FEATURES NO TEMPORALES O EXÓGENOS)
CALL FORECAST_M3_ESCENARIO_1!EXPLAIN_FEATURE_IMPORTANCE();
