---------------------------------------------------------------------------------------------
-- DDL PARA CREACIÓN DE VISTAS Y MODELOS DE FORECAST DE VENTAS POR M3 DE PRODUCTO
-- Este script crea vistas y modelos necesarios para el análisis de ventas de Bebidas por M3
-- en Snowflake, incluyendo la preparación de datos históricos y la generación de predicciones.
---------------------------------------------------------------------------------------------


-- HISTÓRICO PARA FORECAST DE VENTAS POR M3 DE PRODUCTO

CREATE OR REPLACE VIEW BEBIDAS_PROJECT.BEBIDAS_ANALYTICS.VW_VENTAS_HISTORICO_M3 AS
SELECT 
    MES, 
    REGION_CATEGORIA_PRODUCTO,
    M3_VENDIDOS,                                                -- LABEL
    PRECIO_PROMEDIO AS AVG_PRECIO_LISTA,                        -- FEATURE A
    DESC_PORCENTAJE AS AVG_DESC_PORCENTAJE,                     -- FEATURE B
    'Histórico' AS ORIGEN
FROM VW_VENTAS_ML
WHERE MES <= '2025-05-01';


-- FORECAST PARA ESCENARIO 1 M3 A VENDER CON PRECIO PROMEDIO Y DESCUENTO PROMEDIO DEL ULTIMO AÑO

CREATE OR REPLACE VIEW BEBIDAS_PROJECT.BEBIDAS_ANALYTICS.VW_VENTAS_FCST_FEATURES_1 AS

WITH date_series AS (
    SELECT TO_DATE(DATEADD(MONTH, seq, '2025-06-01')) AS MES
    FROM (
        SELECT SEQ4() AS seq
        FROM TABLE(GENERATOR(ROWCOUNT => 12))
    )
),
overall_avg AS (
    SELECT 
        REGION_CATEGORIA_PRODUCTO,
        CEIL(AVG(AVG_PRECIO_LISTA)/100)*100 AS OVERALL_AVG_PRECIO_LISTA,
        ROUND(AVG(AVG_DESC_PORCENTAJE), 0) AS OVERALL_AVG_DESC_PORCENTAJE
    FROM BEBIDAS_PROJECT.BEBIDAS_ANALYTICS.VW_VENTAS_HISTORICO_M3
    GROUP BY REGION_CATEGORIA_PRODUCTO
),
last_twelve_months AS (
    SELECT 
        rcp.REGION_CATEGORIA_PRODUCTO,
        ds.MES AS FORECAST_MONTH,
        CEIL(AVG(CASE 
            WHEN rcp.MES BETWEEN DATEADD(MONTH, -12, ds.MES) AND DATEADD(MONTH, -1, ds.MES)
            THEN rcp.AVG_PRECIO_LISTA 
            ELSE NULL 
        END)/100)*100 AS AVG_PRECIO_LISTA_12M,
        ROUND(AVG(CASE 
            WHEN rcp.MES BETWEEN DATEADD(MONTH, -12, ds.MES) AND DATEADD(MONTH, -1, ds.MES)
            THEN rcp.AVG_DESC_PORCENTAJE 
            ELSE NULL 
        END), 0) AS AVG_DESC_PORCENTAJE_12M
    FROM BEBIDAS_PROJECT.BEBIDAS_ANALYTICS.VW_VENTAS_HISTORICO_M3 rcp
    CROSS JOIN date_series ds
    WHERE rcp.MES < ds.MES
    GROUP BY rcp.REGION_CATEGORIA_PRODUCTO, ds.MES
)
SELECT 
    ltm.REGION_CATEGORIA_PRODUCTO,
    ltm.FORECAST_MONTH AS MES,
    COALESCE(ltm.AVG_PRECIO_LISTA_12M, oa.OVERALL_AVG_PRECIO_LISTA) AS AVG_PRECIO_LISTA,
    COALESCE(ltm.AVG_DESC_PORCENTAJE_12M, oa.OVERALL_AVG_DESC_PORCENTAJE) AS AVG_DESC_PORCENTAJE,
    'Forecast 1' AS ORIGEN
FROM last_twelve_months ltm
LEFT JOIN overall_avg oa
    ON ltm.REGION_CATEGORIA_PRODUCTO = oa.REGION_CATEGORIA_PRODUCTO
ORDER BY ltm.REGION_CATEGORIA_PRODUCTO, ltm.FORECAST_MONTH;

SELECT * FROM BEBIDAS_PROJECT.BEBIDAS_ANALYTICS.VW_VENTAS_FCST_FEATURES_1;


-- FORECAST PARA ESCENARIO 2 M3 A VENDER CON ULTIMO PRECIO CON 5% DE INCREMENTO Y DESCUENTO PROMEDIO

CREATE OR REPLACE VIEW BEBIDAS_PROJECT.BEBIDAS_ANALYTICS.VW_VENTAS_FCST_FEATURES_2 AS
   
WITH date_series AS (
    SELECT TO_DATE(DATEADD(MONTH, seq, '2025-06-01')) AS MES
    FROM (
        SELECT SEQ4() AS seq
        FROM TABLE(GENERATOR(ROWCOUNT => 12))
    )
)
SELECT 
    rcp.REGION_CATEGORIA_PRODUCTO,
    date_series.MES AS MES,
    CEIL(MAX(rcp.AVG_PRECIO_LISTA)*1.05/100)*100 AS AVG_PRECIO_LISTA,
    ROUND(AVG(rcp.AVG_DESC_PORCENTAJE), 0) AS AVG_DESC_PORCENTAJE,
    'Forecast 2' AS ORIGEN
FROM BEBIDAS_PROJECT.BEBIDAS_ANALYTICS.VW_VENTAS_HISTORICO_M3 rcp
CROSS JOIN date_series
GROUP BY rcp.REGION_CATEGORIA_PRODUCTO, date_series.MES
ORDER BY rcp.REGION_CATEGORIA_PRODUCTO, date_series.MES;

SELECT * FROM VW_VENTAS_FCST_FEATURES_2; 


---------------------------------------------------------------------------------------------
-- FORECAST DE VENTAS POR M3 DE PRODUCTO
---------------------------------------------------------------------------------------------

-----------------------------------------------------------
-- SETUP
-----------------------------------------------------------
use role ACCOUNTADMIN;
use warehouse COMPUTE_WH;
use database BEBIDAS_PROJECT;
use schema BEBIDAS_ANALYTICS;

-- VISUALIZACIÓN DE DATOS DE ENTRENAMIENTO

select * from VW_VENTAS_HISTORICO_M3 limit 10;

-- DATOS DE ENTRENAMIENTO (Histórico)

CREATE OR REPLACE VIEW VW_VENTAS_HISTORICO_M3_v1 AS SELECT
    * EXCLUDE(MES, ORIGEN),
    to_timestamp_ntz(MES) as MES_v1
FROM VW_VENTAS_HISTORICO_M3;

-- SON LAS MISMAS VISTAS QUE LAS FEATURES DE FORECAST PERO CON MES EN FORMATO TIMESTAMP
-- CONVERSIÓN DE MES A TIMESTAMP PARA USO EN EL MODELO

-- DATOS DE PREDICCIÓN (Escenario 1) 

CREATE OR REPLACE VIEW VW_VENTAS_FCST_FEATURES_1_v1 AS SELECT
    * EXCLUDE(MES, ORIGEN),
    to_timestamp_ntz(MES) as MES_v1
FROM VW_VENTAS_FCST_FEATURES_1;

-- DATOS DE PREDICCIÓN (Escenario 2)

CREATE OR REPLACE VIEW VW_VENTAS_FCST_FEATURES_2_v1 AS SELECT
    * EXCLUDE(MES, ORIGEN),
    to_timestamp_ntz(MES) as MES_v1
FROM VW_VENTAS_FCST_FEATURES_2;

-----------------------------------------------------------
-- CREAR PREDICCIONES
-----------------------------------------------------------
-- CREACIÓN DE MODELO XGBOOST PARA FORECAST.

CREATE OR REPLACE  SNOWFLAKE.ML.FORECAST FORECAST_M3_MULTIESCENARIOS(
    INPUT_DATA => SYSTEM$REFERENCE('VIEW', 'VW_VENTAS_HISTORICO_M3_v1'),
    SERIES_COLNAME => 'REGION_CATEGORIA_PRODUCTO',
    TIMESTAMP_COLNAME => 'MES_v1',
    TARGET_COLNAME => 'M3_VENDIDOS',
    CONFIG_OBJECT => { 'ON_ERROR': 'SKIP' }
);

-- GENERACIÓN DE PREDICCIONES POR ESCENARIOS

-- A) ESCENARIO 1: M3 A VENDER CON PRECIO PROMEDIO Y DESCUENTO PROMEDIO.

BEGIN
    -- This is the step that creates your predictions.
    CALL FORECAST_M3_MULTIESCENARIOS!FORECAST(
        INPUT_DATA => SYSTEM$REFERENCE('VIEW', 'VW_VENTAS_FCST_FEATURES_1_v1'),
        SERIES_COLNAME => 'REGION_CATEGORIA_PRODUCTO',
        TIMESTAMP_COLNAME => 'MES_v1',
        CONFIG_OBJECT => {'prediction_interval': 0.95} -- IC 95%
    );
    -- These steps store your predictions to a table.
    LET x := SQLID;
    CREATE OR REPLACE TABLE FORECAST_ESCENARIO_1 AS SELECT * FROM TABLE(RESULT_SCAN(:x));
END;


-- B) ESCENARIO 2: M3 A VENDER CON ULTIMO PRECIO CON 20% DE INCREMENTO Y DESCUENTO PROMEDIO.

BEGIN
    -- This is the step that creates your predictions.
    CALL FORECAST_M3_MULTIESCENARIOS!FORECAST(
        INPUT_DATA => SYSTEM$REFERENCE('VIEW', 'VW_VENTAS_FCST_FEATURES_2_v1'),
        SERIES_COLNAME => 'REGION_CATEGORIA_PRODUCTO',
        TIMESTAMP_COLNAME => 'MES_v1',
        -- Here we set your prediction interval.
        CONFIG_OBJECT => {'prediction_interval': 0.95}
    );
    -- These steps store your predictions to a table.
    LET x := SQLID;
    CREATE OR REPLACE TABLE FORECAST_ESCENARIO_2 AS SELECT * FROM TABLE(RESULT_SCAN(:x));
END;

-- CREACIÓN DE VISTA DE PREDICCIONES POR ESCENARIOS PARA VISUALIZACIÓN EN TABLEAU

CREATE OR REPLACE VIEW VW_FORECAST_M3_ESCENARIOS AS

WITH ESCENARIOS AS (
    SELECT
        REGION_CATEGORIA_PRODUCTO,
        MES,
        M3_VENDIDOS AS M3_PRODUCTO,
        'ACTUAL' AS ORIGEN,
        NULL AS LOWER_BOUND,
        NULL AS UPPER_BOUND
    FROM VW_VENTAS_HISTORICO_M3
    UNION ALL
    SELECT
        REPLACE(series, '"', '') AS REGION_CATEGORIA_PRODUCTO,
        ts AS MES,
        forecast AS M3_PRODUCTO,
        'FORECAST 1' AS ORIGEN,
        lower_bound AS LOWER_BOUND,
        upper_bound AS UPPER_BOUND
    FROM FORECAST_ESCENARIO_1
    UNION ALL
    SELECT
        REPLACE(series, '"', '') AS REGION_CATEGORIA_PRODUCTO,
        ts AS MES,
        forecast AS M3_PRODUCTO,
        'FORECAST 2' AS ORIGEN,
        lower_bound AS LOWER_BOUND,
        upper_bound AS UPPER_BOUND
    FROM FORECAST_ESCENARIO_2
),
PREPARED_DATA AS (
    SELECT
        REGION_CATEGORIA_PRODUCTO,
        MES,
        M3_PRODUCTO,
        ORIGEN,
        LOWER_BOUND,
        UPPER_BOUND,

        CASE
            WHEN ORIGEN = 'ACTUAL' THEN 1
            WHEN ORIGEN = 'FORECAST 1' THEN 2
            WHEN ORIGEN = 'FORECAST 2' THEN 3
            ELSE 4
        END AS ORIGEN_ORDER,
        -- Get the previous month's value within each ORIGEN and for the special case
        LAG(M3_PRODUCTO) OVER (PARTITION BY REGION_CATEGORIA_PRODUCTO, ORIGEN ORDER BY MES) AS PREV_M3_SAME_ORIGEN,
        -- Get the last actual value
        LAST_VALUE(CASE WHEN ORIGEN = 'ACTUAL' THEN M3_PRODUCTO ELSE NULL END IGNORE NULLS) OVER (PARTITION BY REGION_CATEGORIA_PRODUCTO ORDER BY MES ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS LAST_ACTUAL_M3,
        -- Rank rows to identify the first forecast value
        ROW_NUMBER() OVER (PARTITION BY REGION_CATEGORIA_PRODUCTO, ORIGEN ORDER BY MES) AS RN_ORIGEN
    FROM ESCENARIOS
)
SELECT
    REGION_CATEGORIA_PRODUCTO,
    MES,
    ORIGEN,
    ROUND(M3_PRODUCTO,3) AS M3_PRODUCTO,
    ROUND(LOWER_BOUND,3) AS LOWER_BOUND,
    ROUND(UPPER_BOUND,3) AS UPPER_BOUND,
    SPLIT_PART(REGION_CATEGORIA_PRODUCTO, '-',1) AS REGION,
    SPLIT_PART(REGION_CATEGORIA_PRODUCTO, '-',2) AS CATEGORIA,
    SPLIT_PART(REGION_CATEGORIA_PRODUCTO, '-',3) AS PRODUCTO,
    ROUND(
    CASE

        WHEN RN_ORIGEN = 1 AND ORIGEN IN ('FORECAST 1', 'FORECAST 2') THEN
            (M3_PRODUCTO - LAST_ACTUAL_M3) / LAST_ACTUAL_M3 * 100

        WHEN PREV_M3_SAME_ORIGEN IS NOT NULL THEN
            (M3_PRODUCTO - PREV_M3_SAME_ORIGEN) / PREV_M3_SAME_ORIGEN * 100
        ELSE NULL
    END ,1) AS PERCENT_CHANGE_MONTH_OVER_MONTH
FROM PREPARED_DATA
ORDER BY REGION_CATEGORIA_PRODUCTO, ORIGEN_ORDER, MES;


----------------------------------------------------------------------------------------------
-- INSPECCIÓN DE RESULTADOS Y MÉTRICAS DE LOS MODELOS POR ITERACIÓN REGION_CATEGORIA_PRODUCTO
----------------------------------------------------------------------------------------------

-- PRECISIÓN DEL MODELO 
CALL FORECAST_M3_ESCENARIO_1!SHOW_EVALUATION_METRICS();

-- IMPORTANCIA DE LAS CARACTERÍSTICAS SELECCIONADAS (EN ESTE CASO SOLO HAY DOS FEATURES NO TEMPORALES O EXÓGENOS)
CALL FORECAST_M3_ESCENARIO_1!EXPLAIN_FEATURE_IMPORTANCE();
